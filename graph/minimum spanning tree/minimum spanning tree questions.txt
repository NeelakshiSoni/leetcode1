standard template : 

heap = [(0 , 0 )]
        heapify(heap)
        visited = set() 

        #print(graph)
        count = 0 
        
        
        while heap : 
            dis , node = heapq.heappop(heap)
            if node in visited : 
                continue 
            count += dis
            visited.add(node)
            for nei in graph[node] :
                next_node , distance = nei 
                if next_node not in visited : 
                    
                    heapq.heappush(heap , (distance , next_node ))
        return count


1. https://leetcode.com/problems/min-cost-to-connect-all-points/


class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        graph = defaultdict(list) 
        n = len(points)
        
        
        
        for i in range(len(points)) : 
            for j in range(i+1 , len(points)) : 
                a = points[i][0] 
                b = points[i][1]
                c = points[j][0] 
                d = points[j][1]
                
                dis = abs(c-a) + abs(b-d)
                #print( dis)
                graph[i].append( (j , dis))
                graph[j].append( (i , dis))
                
                
        heap = [(0 , 0 )]
        heapify(heap)
        visited = set() 

        #print(graph)
        count = 0 
        
        
        while heap : 
            dis , node = heapq.heappop(heap)
            if node in visited : 
                continue 
            count += dis
            visited.add(node)
            for nei in graph[node] :
                next_node , distance = nei 
                if next_node not in visited : 
                    
                    heapq.heappush(heap , (distance , next_node ))
        return count
                    
                