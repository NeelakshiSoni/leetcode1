1. Count Number of Nice Subarrays
class Solution:
    def numberOfSubarrays(self, nums: List[int], k: int) -> int:
        
        
        
        def sliding_window(k) : 
            ans = 0 
            start = 0 
            count = 0 
            
            
            
            for i , num in enumerate(nums) : 
                if num % 2 == 1 : 
                    count += 1 
                    
                while count > k : 
                    if nums[start]%2 : 
                        count -= 1 
                        
                    start += 1 
                    
                ans += (i - start + 1) 
            return ans 
        
        return sliding_window(k) - sliding_window(k-1)

2. 

 Subarrays with K Different Integers




class Solution:
    def subarraysWithKDistinct(self, nums: List[int], k: int) -> int:
        
        
        def sliding_window(k) : 
            
            
            count = 0 
            dic= defaultdict(int) 
            ans = 0 
            start = 0 
            
            
            
            for i , num in enumerate(nums) : 
                dic[num]+=1 
                print(len(dic))
                
                while   len(dic) > k : 
                    dic[nums[start]]-=1 
                    if dic[nums[start]] == 0 : 
                        del dic[nums[start]]
                    start +=1 
                    
                ans += (i - start + 1) 
                
            return ans 
        
        return sliding_window(k) - sliding_window(k-1)


3 . K Divisible Elements Subarrays



class Solution:
    def countDistinct(self, nums: List[int], k: int, p: int) -> int:
        
        
        
        
        ans = 0
        visited = set()
        for i in range(len(nums)) : 
            count = 0 
            path =tuple()
            for j in range(i , len(nums)) : 
                path = path + (nums[j] , )
                
                if nums[j]%p == 0 : 
                    count +=1 
                    
                if count <= k  :
                    if path not in visited: 
                        #print(path)
                        ans += 1 
                        visited.add(path)
                else : 
                    break
        return ans 



4. Count Number of Nice Subarrays 

class Solution:
    def numberOfSubarrays(self, nums: List[int], k: int) -> int:
        """
        
        we can find exactly k elements 
        exactly(k) = almost(k) - almost(k-1)
        if k == 2 
        
        exactly(2)     =        (0 , 1 , 2 )  - (0 , 1)
        
        so thats why we will write down while --- > k 
        """
        
        def sliding_window(k):
        
            odd_count = 0 
            start = 0 
            ans = 0 


            for i in range(len(nums)) : 
                num = nums[i] 
                if num%2 : 
                    odd_count += 1 

                while odd_count > k : 
                    if nums[start]%2 : 
                        odd_count -=1 

                    start +=1 

                ans +=i -start+1  #(because we are count  0 , 1, 2, 3 ...k subarray)

            return ans 
    
        return sliding_window(k) - sliding_window(k-1)



        
                    