1. LRU CACHE  : - https://leetcode.com/problems/lru-cache/

class Node:
    def __init__(self, key, val):
        self.key = key
        self.val = val
        self.prev = None
        self.next = None


class LRUCache:
    def __init__(self, capacity: int):
        self.cap = capacity
        self.left = Node(0, 0)
        self.right = Node(0, 0)
        self.cache = {}  # map the key to node

        # left -- LRU    #right --most recently used
        self.left.next = self.right
        self.right.prev = self.left

    def get(self, key: int) -> int:
        if key in self.cache:
            node = self.cache[key]
            self.remove(node)
            self.insert(node)
            return node.val

        return -1

    def insert(self, node):
        prev_node = self.right.prev
        prev_node.next = node
        node.prev = prev_node
        node.next = self.right
        self.right.prev = node

    def remove(self, node):
        prev_node = node.prev
        next_node = node.next
        prev_node.next = next_node
        next_node.prev = prev_node

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            self.remove(self.cache[key])
            del self.cache[key]

        new_node = Node(key, value)
        self.insert(new_node)
        self.cache[key] = new_node

        if len(self.cache) > self.cap:
            lru_node = self.left.next
            self.remove(lru_node)
            del self.cache[lru_node.key]




2. https://leetcode.com/problems/design-browser-history/ 

class Node: 
    def __init__(self , url : str) : 
        self.data = url 
        self.prev = None 
        self.next = None
class BrowserHistory:

    def __init__(self, homepage: str):
        self.head = Node(homepage)
        self.curr = self.head
        
        
      

    def visit(self, url: str) -> None:
        new_page = Node(url) 
        self.curr.next = new_page 
        new_page.prev = self.curr 
        self.curr = new_page
        

    def back(self, steps: int) -> str:
        
        while self.curr.prev and steps > 0  : 
            self.curr = self.curr.prev 
            steps -=1 
        return self.curr.data
        

    def forward(self, steps: int) -> str:
        
        while self.curr.next and steps > 0  : 
            self.curr = self.curr.next 
            steps -=1 
        return self.curr.data
            
        


# Your BrowserHistory object will be instantiated and called as such:
# obj = BrowserHistory(homepage)
# obj.visit(url)
# param_2 = obj.back(steps)
# param_3 = obj.forward(steps)



3.... 
https://leetcode.com/problems/design-most-recently-used-queue/





class Node : 
    def __init__(self , key ) : 
        self.key = key 
        self.prev = None
        self.next = None
class MRUQueue:

    def __init__(self, n: int):
        
        self.left = Node(0) 
        self.right = Node(0) 
        self.left.next = self.right
        self.right.prev = self.left
        
        for i in range(1 , n+1) : 
            node = Node(i) 
            self.insert(node)
            
            
    def insert(self , node) : 
        prev_node, next_node = self.right.prev , self.right 
        node.prev , node.next = prev_node , self.right 
        self.right.prev = node
        prev_node.next = node
        
    def delete(self , node) : 
        prev_node , next_node = node.prev , node.next 
        prev_node.next , next_node.prev = next_node , prev_node 
        
        
        

    def fetch(self, k: int) -> int:
        
        curr = self.left
        print(curr)
        
        for i in range(k) : 
            curr = curr.next 
            
        self.delete(curr)
        self.insert(curr)
            
        return curr.key 
            
        
        
        


# Your MRUQueue object will be instantiated and called as such:
# obj = MRUQueue(n)
# param_1 = obj.fetch(k)


4. 
https://leetcode.com/problems/convert-binary-search-tree-to-sorted-doubly-linked-list/

"""

class Solution:
    def treeToDoublyList(self, root: 'Optional[Node]') -> 'Optional[Node]':
        if not root : 
            return None 
        
        
        
        dummy = head = Node()
        def dfs(node) : 
            nonlocal head 
            if not node : 
                return 
            dfs(node.left) 
            head.right = node 
            node.left = head 
            head = node 
            dfs(node.right)
            
            
        dfs(root) 
        dummy.right.left , head.right = head , dummy.right 
        return dummy.right 






  3. 
